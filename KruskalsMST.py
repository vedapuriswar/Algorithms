{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Kruskal's.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMrGHpz/eseS4QmG1c01hWw"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"qQrZ5XrLm91C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"outputId":"1129cc48-beea-48f5-be93-d748fa97c690","executionInfo":{"status":"ok","timestamp":1583734239560,"user_tz":-330,"elapsed":891,"user":{"displayName":"Veda","photoUrl":"https://lh4.googleusercontent.com/-qbzCbQ6dXJA/AAAAAAAAAAI/AAAAAAAAAI8/Onl97rsjqfQ/s64/photo.jpg","userId":"07805742090640241985"}}},"source":["from collections import defaultdict \n","class Graph: \n","\n","\tdef __init__(self,vertices): \n","\t\tself.V= vertices \n","\t\tself.graph = []\t\n","\tdef addEdge(self,u,v,w): \n","\t\tself.graph.append([u,v,w]) \n","\tdef find(self, parent, i): \n","\t\tif parent[i] == i: \n","\t\t\treturn i \n","\t\treturn self.find(parent, parent[i]) \n","\tdef union(self, parent, rank, x, y): \n","\t\txroot = self.find(parent, x) \n","\t\tyroot = self.find(parent, y) \n","\t\tif rank[xroot] < rank[yroot]: \n","\t\t\tparent[xroot] = yroot \n","\t\telif rank[xroot] > rank[yroot]: \n","\t\t\tparent[yroot] = xroot \n","\t\telse : \n","\t\t\tparent[yroot] = xroot \n","\t\t\trank[xroot] += 1\n","\tdef KruskalMST(self): \n","\t\tresult =[]\n","\t\ti = 0 \n","\t\te = 0 \n","\t\tself.graph = sorted(self.graph,key=lambda item: item[2]) \n","\t\tparent = [] ; rank = [] \n","\t\tfor node in range(self.V): \n","\t\t\tparent.append(node) \n","\t\t\trank.append(0) \n","\t\twhile e < self.V -1 : \n","\t\t\tu,v,w = self.graph[i] \n","\t\t\ti = i + 1\n","\t\t\tx = self.find(parent, u) \n","\t\t\ty = self.find(parent ,v) \n","\t\t\tif x != y: \n","\t\t\t\te = e + 1\t\n","\t\t\t\tresult.append([u,v,w]) \n","\t\t\t\tself.union(parent, rank, x, y)\t\t\t \n","\t\tprint( \"Following are the edges in the constructed MST\")\n","\t\tfor u,v,weight in result: \n","\t\t\tprint (\"%d -- %d == %d\" % (u,v,weight)) \n","g = Graph(9) \n","g.addEdge(0, 1, 4) \n","g.addEdge(0, 7, 8) \n","g.addEdge(1, 2, 8) \n","g.addEdge(1, 7, 11) \n","g.addEdge(7, 6, 1) \n","g.addEdge(7, 8, 7) \n","g.addEdge(6, 8, 6) \n","g.addEdge(2, 8, 2) \n","g.addEdge(6, 5, 2) \n","g.addEdge(2, 5, 4) \n","g.addEdge(2, 3, 7)  \n","g.addEdge(3, 5, 14)  \n","g.addEdge(3, 4, 9)  \n","g.addEdge(4, 5, 10)  \n","\n","g.KruskalMST() \n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Following are the edges in the constructed MST\n","7 -- 6 == 1\n","2 -- 8 == 2\n","6 -- 5 == 2\n","0 -- 1 == 4\n","2 -- 5 == 4\n","2 -- 3 == 7\n","0 -- 7 == 8\n","3 -- 4 == 9\n"],"name":"stdout"}]}]}