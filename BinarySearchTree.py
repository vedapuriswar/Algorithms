{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BinarySearchTree.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP9Hns4iH/Ma/Qs82SZ+GzE"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"mVAmTBYgolwP","colab_type":"code","outputId":"1593e966-6d9d-4499-c89a-d3d367816212","executionInfo":{"status":"ok","timestamp":1583761867896,"user_tz":-330,"elapsed":1125,"user":{"displayName":"Veda","photoUrl":"https://lh4.googleusercontent.com/-qbzCbQ6dXJA/AAAAAAAAAAI/AAAAAAAAAI8/Onl97rsjqfQ/s64/photo.jpg","userId":"07805742090640241985"}},"colab":{"base_uri":"https://localhost:8080/","height":218}},"source":["class Node: \n","\tdef __init__(self, key): \n","\t\tself.key = key \n","\t\tself.left = None\n","\t\tself.right = None\n","\n","def inorder(root): \n","\tif root is not None: \n","\t\tinorder(root.left) \n","\t\tprint (root.key, end = '  ') \n","\t\tinorder(root.right) \n","def insert( node, key): \n","\tif node is None: \n","\t\treturn Node(key) \n","\tif key < node.key: \n","\t\tnode.left = insert(node.left, key) \n","\telse: \n","\t\tnode.right = insert(node.right, key) \n","\treturn node \n","def minValueNode( node): \n","\tcurrent = node \n","\twhile(current.left is not None): \n","\t\tcurrent = current.left \n","\treturn current \n","def deleteNode(root, key): \n","\tif root is None: \n","\t\treturn root \n","\tif key < root.key: \n","\t\troot.left = deleteNode(root.left, key) \n","\telif(key > root.key): \n","\t\troot.right = deleteNode(root.right, key) \n","\telse: \n","\t\tif root.left is None : \n","\t\t\ttemp = root.right \n","\t\t\troot = None\n","\t\t\treturn temp \n","\t\telif root.right is None : \n","\t\t\ttemp = root.left \n","\t\t\troot = None\n","\t\t\treturn temp \n","\t\ttemp = minValueNode(root.right) \n","\t\troot.key = temp.key \n","\t\troot.right = deleteNode(root.right , temp.key) \n","\treturn root \n","def search(root,val): \n","  if root is None: \n","      return \"Does not exist\"\n","  if root.key < val: \n","      return search(root.right, val) \n","  if root.key > val:\n","      return search(root.left, val)\n","  return \"Exists\"\n","root = None\n","root = insert(root, 50) \n","root = insert(root, 30) \n","root = insert(root, 20) \n","root = insert(root, 40) \n","root = insert(root, 70) \n","root = insert(root, 60) \n","root = insert(root, 80) \n","print(\"Inorder traversal of the given tree\")\n","inorder(root) \n","print(\"\\nDelete 20\")\n","root = deleteNode(root, 20) \n","print(\"Inorder traversal of the modified tree\")\n","inorder(root) \n","print(\"\\nDelete 30\")\n","root = deleteNode(root, 30) \n","print(\"Inorder traversal of the modified tree\")\n","inorder(root) \n","print(\"\\nDelete 50\")\n","root = deleteNode(root, 50) \n","print(\"Inorder traversal of the modified tree\")\n","inorder(root) \n","print(\"\\n\" + str(search(root, 50)))"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Inorder traversal of the given tree\n","20  30  40  50  60  70  80  \n","Delete 20\n","Inorder traversal of the modified tree\n","30  40  50  60  70  80  \n","Delete 30\n","Inorder traversal of the modified tree\n","40  50  60  70  80  \n","Delete 50\n","Inorder traversal of the modified tree\n","40  60  70  80  \n","Does not exist\n"],"name":"stdout"}]}]}